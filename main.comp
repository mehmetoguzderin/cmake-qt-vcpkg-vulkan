#version 460

layout(std140, binding = 0) uniform buf {
  mat4 mvp;
  mat4 inverse_mvp;
  vec4 origin_0_0;
  vec4 origin_1_0;
  vec4 origin_0_1;
  vec4 direction_0_0;
  vec4 direction_1_0;
  vec4 direction_0_1;
  vec4 data_width_height_time;
}
ubuf;

layout(binding = 1, rgba32f) uniform image2D textureImage;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

bool rayIntersectsTriangle(vec3 rayOrigin, vec3 rayDirection, vec3 vertex0,
                           vec3 vertex1, vec3 vertex2, out float t) {
  const float EPSILON = 0.00001;
  vec3 edge1, edge2, h, s, q;
  float a, f, u, v;
  edge1 = vertex1 - vertex0;
  edge2 = vertex2 - vertex0;
  h = cross(rayDirection, edge2);
  a = dot(edge1, h);

  if (a > -EPSILON && a < EPSILON)
    return false;

  f = 1.0 / a;
  s = rayOrigin - vertex0;
  u = f * dot(s, h);

  if (u < 0.0 || u > 1.0)
    return false;

  q = cross(s, edge1);
  v = f * dot(rayDirection, q);

  if (v < 0.0 || u + v > 1.0)
    return false;

  t = f * dot(edge2, q);

  if (t > EPSILON)
    return true;

  else
    return false;
}

const vec4 vertexPositions[3] =
    vec4[](vec4(0.0f, 1.0f, 0.0f, 1.0f), vec4(-1.0f, -1.0f, 0.0f, 1.0f),
           vec4(1.0f, -1.0f, 0.0f, 1.0f));

void main() {
  uvec3 globalID = gl_GlobalInvocationID.xyz;
  if (globalID.x >= imageSize(textureImage).x ||
      globalID.y >= imageSize(textureImage).y) {
    return;
  }

  uvec3 localID = gl_LocalInvocationID.xyz;
  vec2 screenUV = vec2(globalID.xy) / vec2(imageSize(textureImage).xy);

  vec3 rayOrigin = ubuf.origin_0_0.xyz +
                   float(globalID.x) * ubuf.origin_1_0.xyz +
                   float(globalID.y) * ubuf.origin_0_1.xyz;

  vec3 rayDirection = normalize(ubuf.direction_0_0.xyz +
                                float(globalID.x) * ubuf.direction_1_0.xyz +
                                float(globalID.y) * ubuf.direction_0_1.xyz);

  vec4 pixelValue =
      vec4(float(globalID.x) / float(imageSize(textureImage).x),
           float(globalID.y) / float(imageSize(textureImage).y), 1.0, 1.0);
  float t;
  if (!rayIntersectsTriangle(rayOrigin, rayDirection, vertexPositions[0].xyz,
                             vertexPositions[1].xyz, vertexPositions[2].xyz,
                             t)) {
    pixelValue = vec4(0.0, 0.0, 0.0, 1.0);
  }

  imageStore(textureImage, ivec2(globalID.xy), pixelValue);
}
